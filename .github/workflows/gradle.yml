# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: Java CI/CD with Gradle

on:
  push:
    branches: [ "master" ]

permissions:
  contents: read

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - run: touch ./src/main/resources/application.properties
      - run: echo "${{ secrets.APPLICATION }}" > ./src/main/resources/application.properties
      - run: cat ./src/main/resources/application.properties
      - run: touch ./src/main/resources/application-dev.properties
      - run: echo "${{ secrets.APPLICATION_DEV }}" > ./src/main/resources/application-dev.properties
      - run: cat ./src/main/resources/application-dev.properties
      - run: touch ./src/main/resources/application-prod.properties
      - run: echo "${{ secrets.APPLICATION_PROD }}" > ./src/main/resources/application-prod.properties
      - run: cat ./src/main/resources/application-prod.properties
      - run: rm -rf ./src/main/generated

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build with Gradle
        uses: gradle/gradle-build-action@v2 # v2.6.0
        with:
          arguments: build
          gradle-version: 7.6.1

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: distfiles
          path: build/libs/*.jar

  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - run: mkdir ~/distfiles

      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: distfiles
          path: distfiles

      - name: Deliver File
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT }}
#          rm : true
          source: distfiles/*
          target: "/home/ubuntu/deploy"

      - name: Execute Server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            SOURCE_DIR=/home/ubuntu/deploy/distfiles
            FILE_NAME=`find $SOURCE_DIR/*.jar -printf "%f\n"`
            PID=`ps -ef | grep test-0.0.1-SNAPSHOT.jar | grep nohup | awk '{print $2}'`
            
            if [ -z "$PID" ]; then
                    echo "#### THERE IS NO PROCESS ####"
            else
                    echo "#### KILL PROCESS ####"
                    sudo fuser -k 9998/tcp || true
            fi

            echo "#### RUN $SOURCE_DIR/$FILE_NAME ####"

            sudo nohup java -jar -Dspring.profiles.active=prod -Duser.timezone=Asia/Seoul $SOURCE_DIR/$FILE_NAME > nohup.out 2> nohup.err < /dev/null &